// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4537.Steam2017V21;
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	public static Compressor Compressor;
	public static Solenoid rampSolenoid;
	public static Solenoid flippersSolenoid;
	public static ADXRS450_Gyro telemeteryGyro;
	public static Accelerometer telemeteryAccRio;
	public static AnalogInput telemeteryPressure;
	public static DigitalInput climberLimitSwitch;
	public static DigitalInput mxpIBlack;
	public static DigitalInput mxpIWhite;
	public static DigitalInput mxpIGreen;
	public static DigitalInput mxpIYellow;
	public static DigitalInput mxpIBlue;
	public static DigitalOutput mxpORed;
	public static PowerDistributionPanel telemeteryPowerDistributionPanel;

	//Declare Motors
	public static CANTalon dlMotor1;
	public static CANTalon dlMotor2;
	public static CANTalon dlMotor3;
	public static CANTalon drMotor4;
	public static CANTalon drMotor5;
	public static CANTalon drMotor6;
	public static CANTalon climbMotor1;
	public static CANTalon climbMotor2;
	//Declare encoders
	public static CANTalon leftEncoder;
	public static CANTalon rightEncoder;

	//Motor IDs
	private static final int MOTOR_DL_1 = Config.MOTOR_DL_1;
	private static final int MOTOR_DL_2 = Config.MOTOR_DL_2;
	private static final int MOTOR_DL_3 = Config.MOTOR_DL_3;
	private static final int MOTOR_DR_4 = Config.MOTOR_DR_4;
	private static final int MOTOR_DR_5 = Config.MOTOR_DR_5;
	private static final int MOTOR_DR_6 = Config.MOTOR_DR_6;

	public static void init() {
		climberLimitSwitch = new DigitalInput(Config.DGI_CLIMBER_SWITCH);
		LiveWindow.addSensor("Climber", "Limit Switch", climberLimitSwitch);
		
		mxpIBlack = new DigitalInput(Config.DGI_MXP_BLACK);
		LiveWindow.addSensor("MXP", "In Black", mxpIBlack);
		
		mxpIWhite = new DigitalInput(Config.DGI_MXP_WHITE);
		LiveWindow.addSensor("MXP", "In White", mxpIWhite);
		
		mxpIGreen = new DigitalInput(Config.DGI_MXP_GREEN);
		LiveWindow.addSensor("MXP", "In Green", mxpIGreen);
		
		mxpIYellow = new DigitalInput(Config.DGI_MXP_YELLOW);
		LiveWindow.addSensor("MXP", "In Yellow", mxpIYellow);
		
		mxpIBlue = new DigitalInput(Config.DGI_MXP_BLUE);
		LiveWindow.addSensor("MXP", "In Blue", mxpIBlue);
		
		mxpORed = new DigitalOutput(Config.DGO_MXP_RED);
		LiveWindow.addActuator("MXP", "Out Red", mxpORed);

		telemeteryGyro = new ADXRS450_Gyro(Config.GYRO_PORT);
		LiveWindow.addSensor("Telemetary", "Gyro", telemeteryGyro);

		telemeteryAccRio = new BuiltInAccelerometer(Config.ACCELEROMETER_RANGE);
		//FIXME LiveWindow.addSensor("Telemetary", "Accelerometer", telemeteryAccRio);

		rampSolenoid = new Solenoid(Config.PCM_CAN_PORT, Config.PCM_RAMP_PORT);
		LiveWindow.addActuator("Pneumatics", "Solenoid 1", rampSolenoid);

		flippersSolenoid = new Solenoid(Config.PCM_CAN_PORT, Config.PCM_FLIPPER_PORT);
		LiveWindow.addActuator("Pneumatics", "Solenoid 2", flippersSolenoid);

		telemeteryPressure = new AnalogInput(Config.ANI_PRESSURE);
		LiveWindow.addSensor("Telemetery", "Pressure", telemeteryPressure);

		telemeteryPowerDistributionPanel = new PowerDistributionPanel(Config.PDP_CAN_PORT);
		LiveWindow.addSensor("Telemetery", "PowerDistributionPanel", telemeteryPowerDistributionPanel);

		//Instatniating the motors
		//left motors
		RobotMap.dlMotor1 = new CANTalon(MOTOR_DL_1);
		RobotMap.dlMotor1.setExpiration(0.1);
		RobotMap.dlMotor1.setInverted(true);
		LiveWindow.addActuator("DriveBase", "Drive Left Motor 1", dlMotor1);

		RobotMap.dlMotor2 = new CANTalon(MOTOR_DL_2);
		RobotMap.dlMotor2.setExpiration(0.1);
		RobotMap.dlMotor2.setInverted(true);
		LiveWindow.addActuator("DriveBase", "Drive Left Motor 2", dlMotor2);

		RobotMap.dlMotor3 = new CANTalon(MOTOR_DL_3);
		RobotMap.dlMotor3.setExpiration(0.1);
		RobotMap.dlMotor3.setInverted(true);
		LiveWindow.addActuator("DriveBase", "Drive Left Motor 3", dlMotor3);

		//Right motors
		RobotMap.drMotor4 = new CANTalon(MOTOR_DR_4);
		RobotMap.drMotor4.setExpiration(0.1);
		LiveWindow.addActuator("DriveBase", "Drive Right Motor 4", drMotor4);

		RobotMap.drMotor5 = new CANTalon(MOTOR_DR_5);
		RobotMap.drMotor5.setExpiration(0.1);
		LiveWindow.addActuator("DriveBase", "Drive Right Motor 5", drMotor5);

		RobotMap.drMotor6 = new CANTalon(MOTOR_DR_6);
		RobotMap.drMotor6.setExpiration(0.1);
		LiveWindow.addActuator("DriveBase", "Drive Right Motor 6", drMotor6);

		//Climber motors
		RobotMap.climbMotor1 = new CANTalon(Config.CLIMB_MOTOR_1);
		RobotMap.climbMotor1.setExpiration(0.1);
		LiveWindow.addActuator("Climber", "Climb Motor 1", climbMotor1);
		
		RobotMap.climbMotor2 = new CANTalon(Config.CLIMB_MOTOR_2);
		RobotMap.climbMotor2.setExpiration(0.1);
		LiveWindow.addActuator("Climber", "Climb Motor 2", climbMotor2); 
		
		//Encoders
		RobotMap.leftEncoder = RobotMap.dlMotor3;
		LiveWindow.addSensor("Encoder", "Left Encoder", leftEncoder);
		RobotMap.rightEncoder = RobotMap.drMotor4;
		LiveWindow.addSensor("Encoder", "Right Encoder", rightEncoder);
	}
}
