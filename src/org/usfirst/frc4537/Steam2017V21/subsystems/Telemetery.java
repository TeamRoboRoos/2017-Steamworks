// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4537.Steam2017V21.subsystems;

import org.usfirst.frc4537.Steam2017V21.Config;
import org.usfirst.frc4537.Steam2017V21.Robot;
import org.usfirst.frc4537.Steam2017V21.RobotMap;
import org.usfirst.frc4537.Steam2017V21.commands.*;
import org.usfirst.frc4537.Steam2017V21.libraries.Functions;

import com.ctre.phoenix.motorcontrol.can.TalonSRX;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.PowerDistributionPanel;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Telemetery extends Subsystem {
	private static final NetworkTable pyMirror = NetworkTable.getTable(Config.TABLE_PATH);
	private static final ADXRS450_Gyro gyro = RobotMap.telemeteryGyro;
	private static final AnalogInput pressure = RobotMap.telemeteryPressure;
	private static final PowerDistributionPanel powerDistributionPanel = RobotMap.telemeteryPowerDistributionPanel;
	private static final TalonSRX lenc = RobotMap.leftEncoder;
	private static final TalonSRX renc = RobotMap.rightEncoder;

	public static double[] pressureCal = {};

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
		setDefaultCommand(new sdbPut());
	}

	public static double pressureGet() {
		return Functions.pressure(pressure.getValue(), pressureCal[0], pressureCal[1]);
	}

	public static double currentGet(int channel) {
		return powerDistributionPanel.getCurrent(channel);
	}

	public static double gyroGetAngle() {
		return gyro.getAngle();
	}

	public static double gyroGetRate() {
		return gyro.getRate();
	}

	public static double getEncL() {
		return Functions.encoder(-lenc.getSensorCollection().getQuadraturePosition());
	}

	public static double getEncR() {
		return Functions.encoder(renc.getSensorCollection().getQuadraturePosition());
	}

	public static NetworkTable getNetTable() {
		return pyMirror;
	}

	public static void telemeteryDebug() {

	}
	
	public static double[][][] unpackProfile(String profilePath) {
		return new double[][][] {};
	}
	
	public void debug() {
//		SmartDashboard.putData(pdp);
//		System.out.println(pdp);
//		SmartDashboard.putData("Compressor", compressor);
		SmartDashboard.putNumber("CompressorCurrent", RobotMap.compressor.getCompressorCurrent());
		SmartDashboard.putNumber("PDP-12 (L)", powerDistributionPanel.getCurrent(12));
		SmartDashboard.putNumber("PDP-13 (R)", powerDistributionPanel.getCurrent(13));
		SmartDashboard.putNumber("PDP-14 (L)", powerDistributionPanel.getCurrent(14));
		SmartDashboard.putNumber("PDP-15 (R)", powerDistributionPanel.getCurrent(15));
		SmartDashboard.putNumber("PDP-07 (B)", powerDistributionPanel.getCurrent(7));
		SmartDashboard.putNumber("PDP-TOTAL", powerDistributionPanel.getTotalCurrent());
		SmartDashboard.putString("PDP-ENERGY", Double.toString(Math.round(powerDistributionPanel.getTotalEnergy()*100)/100000)+"kJ");
	}

}

