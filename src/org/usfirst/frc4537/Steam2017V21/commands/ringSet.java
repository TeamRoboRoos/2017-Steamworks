// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4537.Steam2017V21.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4537.Steam2017V21.Robot;
import org.usfirst.frc4537.Steam2017V21.RobotMap;
import org.usfirst.frc4537.Steam2017V21.subsystems.*;

/**
 *
 */
public class ringSet extends Command {
	
	private int operation = 0; //0=Off, 1=Red, 2=Green, 3=[Toggle]
    
	/**
	 * Sets camera ring light to either normal or solid red/green mode
	 * @param param Operation
	 */
    public ringSet(int param) {
		operation = param;
	}

	// Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (operation == 0) {
    		MXP.ringMode = !MXP.ringMode;
    		if (MXP.ringMode) {
    			MXP.ringColour = false;
    		}
    	}
    	if (operation == 1 && MXP.ringMode) {
    		MXP.ringColour = !MXP.ringColour;
    	}
    	
    	if (MXP.ringMode) {
    		MXP.setPin(RobotMap.mxpORL, true);
    		MXP.setPin(RobotMap.mxpOBL, MXP.ringColour);
    	}
    	else { //Mode is false
    		MXP.setPin(RobotMap.mxpORL, false);
    		MXP.setPin(RobotMap.mxpOBL, false);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
