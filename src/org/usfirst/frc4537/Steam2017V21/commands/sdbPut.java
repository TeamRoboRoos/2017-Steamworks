// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4537.Steam2017V21.commands;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4537.Steam2017V21.Config;
import org.usfirst.frc4537.Steam2017V21.Robot;
import org.usfirst.frc4537.Steam2017V21.RobotMap;
import org.usfirst.frc4537.Steam2017V21.libraries.Functions;
import org.usfirst.frc4537.Steam2017V21.subsystems.*;

/**
 *
 */
public class sdbPut extends Command {
	private NetworkTable pyMirror = Telemetery.getNetTable();
	private DigitalInput climbSensor = RobotMap.climberLimitSwitch;
	private double pressure = 0;
	private double lEncVal = 0;
	private double rEncVal = 0;
	private boolean climbValue = false;
	private boolean rampValue = false;
	private boolean flippersValue = false;
	private double climberCurrent = 0.0;
	private double driveCurrent = 0.0;
	private String tx,txl,rx,rxl;

	public sdbPut() {
		requires(Robot.telemetery);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		setRunWhenDisabled(true);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		pressure = Telemetery.pressureGet();
		lEncVal = Functions.encoder(Telemetery.getEncL());
		rEncVal = Functions.encoder(Telemetery.getEncR());
		//rEncVal = Telemetery.getEncR();
		climbValue = climbSensor.get();
		rampValue = Pneumatics.rampGetState();
		flippersValue = Pneumatics.flippersGetState();
		climberCurrent = Telemetery.currentGet(0)+Telemetery.currentGet(12);
		driveCurrent = Telemetery.currentGet(1)+Telemetery.currentGet(2)+Telemetery.currentGet(3)+Telemetery.currentGet(13)+Telemetery.currentGet(14)+Telemetery.currentGet(15);
		SmartDashboard.putNumber("Pressure", pressure);
		SmartDashboard.putNumber("LeftEncoder", lEncVal);
		SmartDashboard.putNumber("Right Encoder", rEncVal);
		SmartDashboard.putBoolean("Climber", climbValue);
		SmartDashboard.putBoolean("Ramp", rampValue);
		SmartDashboard.putBoolean("Flippers", flippersValue);
		SmartDashboard.putNumber("Climber Current", climberCurrent);
		SmartDashboard.putNumber("Drive Current", driveCurrent);
		SmartDashboard.putBoolean("Compressor", Pneumatics.compressorGetMode());
		
		pyMirror.putString("str", "~00~10");
		if (SmartDashboard.getBoolean("ard_push", false)){
			tx = SmartDashboard.getString("ard_data", "");
			if(!tx.equals(txl)){
				MXP.sendSerial(tx);
				SmartDashboard.putString("ard_value", tx);
				txl = tx;
			}
		}
		rx = MXP.readSerial();
		if(!rx.equals(rxl) && !rx.equals("")){
			SmartDashboard.putString("ard_return", rx);
			rxl = rx;
		}

		if (!Config.SUPPRESS_PCM_WARNINGS){
			if (!Pneumatics.compressorGetMode()) {
				System.out.println("WARNING Compressor not enabled");
			}
			if (pressure < 60) {
				System.out.println("ERROR Pressure Low: "+Functions.floor(pressure)+" psi");
			}
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return true;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
