// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4537.Steam2017V21.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4537.Steam2017V21.Robot;
import org.usfirst.frc4537.Steam2017V21.RobotMap;
import org.usfirst.frc4537.Steam2017V21.subsystems.*;

/**
 *
 */
public class mxpRead extends Command {
	private int binary = 0;

    public mxpRead() {
    	requires(Robot.mxp);
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	binary = 0;
    	if (MXP.readPin(RobotMap.mxpI1)) {
    		binary += 1;
    	}
    	if (MXP.readPin(RobotMap.mxpI2)) {
    		binary += 2;
    	}
    	if (MXP.readPin(RobotMap.mxpI4)) {
    		binary += 4;
    	}
    	if (MXP.readPin(RobotMap.mxpI8)) {
    		binary += 8;
    	}
    	/*if (MXP.readPin(RobotMap.mxpIBlue)) {
    		binary += 16;
    	}*/
    	SmartDashboard.putNumber("MXPValue", binary);
    	System.out.println(MXP.readPin(RobotMap.mxpI1)+" "+MXP.readPin(RobotMap.mxpI2)+" "+MXP.readPin(RobotMap.mxpI4)+" "+MXP.readPin(RobotMap.mxpI8));
    	MXP.mxpValue = binary;
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
