// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4537.Steam2017V21.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4537.Steam2017V21.Robot;
import org.usfirst.frc4537.Steam2017V21.RobotMap;
import org.usfirst.frc4537.Steam2017V21.subsystems.MXP;
import org.usfirst.frc4537.Steam2017V21.subsystems.Pneumatics;
import org.usfirst.frc4537.Steam2017V21.subsystems.Telemetery;

import com.ctre.phoenix.motorcontrol.can.TalonSRX;

/**
 *
 */
public class AutoBaseLine extends Command {
	final double OFFSET_TURN = 0.2;
	long lastTime = 0;
	int state = 0;

	private double gyroAngle = 0.0;
	private double gyroAngleLast = 0.0;
	private double encDistAvg = 0.0;
	private double encDistAvgLast = 0.0;

	final double driveSpeed = 0.5;

	public AutoBaseLine() {
		requires(Robot.driveBase);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		//System.out.println("State: " + state);
		
		encDistAvg = ((Telemetery.getEncL() + Telemetery.getEncR())/2);
		gyroAngle = Telemetery.gyroGetAngle();
		
		if (state == 0) {
			lastTime = System.currentTimeMillis();
			gyroAngleLast = gyroAngle;
			state = 1;
		}
		else if (state == 1) {
			Robot.driveBase.arcadeDrive(-0.75, -(gyroAngle-gyroAngleLast)/10); //was 0.75
			if (lastTime+10000 <= System.currentTimeMillis()) { //was 4000
				state = 2;
			}
		}
		else {
			Robot.driveBase.arcadeDrive(0.0, 0.0);
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		if (state == 2) {
			return true;
		}
		else {
			return false;
		}
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveBase.arcadeDrive(0.0, 0.0);
		state = 0;
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
