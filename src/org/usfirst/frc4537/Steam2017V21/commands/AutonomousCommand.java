// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4537.Steam2017V21.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4537.Steam2017V21.Robot;
import org.usfirst.frc4537.Steam2017V21.RobotMap;
import org.usfirst.frc4537.Steam2017V21.subsystems.MXP;
import org.usfirst.frc4537.Steam2017V21.subsystems.Pneumatics;

import com.ctre.CANTalon;

/**
 *
 */
public class AutonomousCommand extends Command {
	final int HARD_RIGHT = 3;
	final int MED_RIGHT = 2;
	final int SMALL_RIGHT = 1;
	final int HARD_LEFT = 12;
	final int MED_LEFT = 8;
	final int SMALL_LEFT = 4;
	final int FWD = 10;
	final int STOP = 15;
	final int NS = 0;
	final double OFFSET_TURN = 0.2;
	long lastTime = 0;
	int state = 0;
	int mode = 2; //0-drive straight, 1-vision only

	final double driveSpeed = 0.5;

	public AutonomousCommand() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		System.out.println("State: " + state);
		if (mode == 0) {
			if (state == 0) {
				lastTime = System.currentTimeMillis();
				state = 1;
			}
			else if (state == 1) {
				Robot.driveBase.arcadeDrive(-0.75, 0.0 + OFFSET_TURN);
				if (lastTime+4000 <= System.currentTimeMillis()) {
					state = 2;
				}
			}
			else {
				Robot.driveBase.arcadeDrive(0.0, 0.0);
			}
		}

		else if (mode == 1) {
			if (state == 0) {
				if (MXP.mxpValue == HARD_RIGHT) {
					Robot.driveBase.arcadeDrive(-driveSpeed, 0.35 + OFFSET_TURN);
					System.out.println("Vision: " + "HR");
				}
				else if (MXP.mxpValue == MED_RIGHT) {
					Robot.driveBase.arcadeDrive(-driveSpeed, 0.3 + OFFSET_TURN);
					System.out.println("Vision: " + "MR");
				}
				else if (MXP.mxpValue == SMALL_RIGHT) {
					Robot.driveBase.arcadeDrive(-driveSpeed, 0.25 + OFFSET_TURN);
					System.out.println("Vision: " + "LR");
				}
				else if (MXP.mxpValue == HARD_LEFT) {
					Robot.driveBase.arcadeDrive(-driveSpeed, -0.35 + OFFSET_TURN);
					System.out.println("Vision: " + "HL");
				}
				else if (MXP.mxpValue == MED_LEFT) {
					Robot.driveBase.arcadeDrive(-driveSpeed, -0.3 + OFFSET_TURN);
					System.out.println("Vision: " + "ML");
				}
				else if (MXP.mxpValue == SMALL_LEFT) {
					Robot.driveBase.arcadeDrive(-driveSpeed, -0.25 + OFFSET_TURN);
					System.out.println("Vision: " + "LL");
				}
				else if (MXP.mxpValue == STOP) {
					Robot.driveBase.arcadeDrive(0.0, 0.0);
					state = 1;
				}
				else {
					Robot.driveBase.arcadeDrive(-driveSpeed, 0.0 + OFFSET_TURN);
				}
			}
			else if (state == 1) {
				lastTime = System.currentTimeMillis();
				Pneumatics.flippersToggle();
				state = 2;
			}
			else if (state == 2) {
				Robot.driveBase.arcadeDrive(0.0, 0.0);
				if (lastTime+500 <= System.currentTimeMillis()) {
					state = 3;
				}
			}
			else if (state == 3) {
				Robot.driveBase.arcadeDrive(driveSpeed, 0.0);
				if (lastTime+500+3000 <= System.currentTimeMillis()) {
					state = 4;
				}
			}
			else {
				Robot.driveBase.arcadeDrive(0.0, 0.0);
			}
		}
		
		else if (mode == 2) {
			if (state == 0) {
				lastTime = System.currentTimeMillis();
				state = 1;
			}
			else if (state == 1) {
				Robot.driveBase.arcadeDrive(-0.75, 0.0 + OFFSET_TURN);
				if (lastTime+1500 <= System.currentTimeMillis()) {
					lastTime = System.currentTimeMillis();
					state = 2;
				}
			}
			else if (state == 2) {
				Robot.driveBase.arcadeDrive(0.1, -0.5);
				if (lastTime+1000 <= System.currentTimeMillis()) {
					state = 3;
				}
			}
			else if (state == 3) {
				state = 0;
				mode = 1;
			}
			else {
				Robot.driveBase.arcadeDrive(0.0, 0.0);
			}
		}

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		if ( mode == 0 && state == 2) {
			return true;
		}
		else if ( mode == 1 && state == 4) {
			Pneumatics.flippersToggle();
			return true;
		}
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveBase.arcadeDrive(0.0, 0.0);
		state = 0;
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
